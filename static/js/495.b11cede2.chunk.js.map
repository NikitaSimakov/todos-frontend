{"version":3,"file":"static/js/495.b11cede2.chunk.js","mappings":"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","sources":["webpack://todos-frontend/./src/components/Task/Task.module.scss?c652","webpack://todos-frontend/./src/components/TaskIcons/TaskIcons.module.scss?52f3","components/TaskIcons/TaskIcons.tsx","webpack://todos-frontend/./src/components/Modal/Modal.module.scss?b72d","components/Modal/Modal.tsx","webpack://todos-frontend/./src/components/TaskEditor/TaskEditor.module.scss?5acd","components/TaskEditor/TaskEditor.tsx","components/Task/Task.tsx","webpack://todos-frontend/./src/components/TaskList/TaskList.module.scss?30ed","components/TaskList/TaskList.tsx","webpack://todos-frontend/./src/components/TaskAdd/TaskAdd.module.scss?1f63","components/TaskAdd/TaskAdd.tsx","pages/Tasks.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Task_wrapper__CE+Ok\",\"text\":\"Task_text__vGIiB\",\"button\":\"Task_button__V47ld\"};","// extracted by mini-css-extract-plugin\nexport default {\"buttonBox\":\"TaskIcons_buttonBox__wkfD6\",\"button\":\"TaskIcons_button__vntqI\",\"pending\":\"TaskIcons_pending__93UD3\",\"progress\":\"TaskIcons_progress__Q14AU\",\"done\":\"TaskIcons_done__8bcWb\",\"active\":\"TaskIcons_active__-H5mP\"};","import { TbDeviceIpadQuestion } from 'react-icons/tb';\nimport { TbDeviceIpadUp } from 'react-icons/tb';\nimport { TbDeviceIpadStar } from 'react-icons/tb';\nimport { updateStatusTask } from '../../redux/tasks/operations';\nimport { useAppDispatch } from '../../redux/hooks';\nimport css from './TaskIcons.module.scss';\n\ntype Props = {\n  status: string;\n  id: string;\n};\n\nconst icons = [\n  { iconId: 1, buttonStatus: 'pending', icon: <TbDeviceIpadQuestion /> },\n  { iconId: 2, buttonStatus: 'progress', icon: <TbDeviceIpadUp /> },\n  { iconId: 3, buttonStatus: 'done', icon: <TbDeviceIpadStar /> },\n];\n\nconst TaskIcons = ({ status, id }: Props) => {\n  const dispatch = useAppDispatch();\n  const markup = icons.map(({ buttonStatus, icon, iconId }) => (\n    <button\n      disabled={buttonStatus === status}\n      onClick={() => dispatch(updateStatusTask({ id, status: buttonStatus }))}\n      key={iconId}\n      className={`${css[status]} ${css.button} ${\n        status === buttonStatus ? css.active : ''\n      }`}\n    >\n      {icon}\n    </button>\n  ));\n  return <div className={css.buttonBox}>{markup}</div>;\n};\n\nexport default TaskIcons;\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__b+zEz\",\"modal\":\"Modal_modal__yEgVW\",\"closeButton\":\"Modal_closeButton__3V9B-\"};","import { ReactNode, FC, useEffect, MouseEvent } from 'react';\nimport { createPortal } from 'react-dom';\nimport { VscChromeClose } from 'react-icons/vsc';\nimport css from './Modal.module.scss';\n\ninterface IModalProps {\n  children: ReactNode;\n  onClose: () => void;\n}\n\nconst modalRoot = document.getElementById('modal-root') as HTMLElement;\n\nconst Modal: FC<IModalProps> = ({ children, onClose }) => {\n  useEffect(() => {\n    const esc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onClose();\n    };\n    window.addEventListener('keydown', esc);\n    return () => {\n      window.removeEventListener('keydown', esc);\n    };\n  }, [onClose]);\n\n  const onEscTapHandler = (\n    event: MouseEvent<HTMLDivElement, globalThis.MouseEvent>\n  ) => {\n    if (event.target === event.currentTarget) onClose();\n  };\n\n  const Modal = (\n    <div onClick={onEscTapHandler} className={css.overlay}>\n      <section className={css.modal}>\n        <button onClick={onClose} className={css.closeButton} type=\"button\">\n          <VscChromeClose />\n        </button>\n        {children}\n      </section>\n    </div>\n  );\n  return createPortal(Modal, modalRoot);\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"TaskEditor_form__+91ls\",\"input\":\"TaskEditor_input__eEAwt\",\"button\":\"TaskEditor_button__aaHcY\"};","import { useSelector } from 'react-redux';\nimport { updateTask } from '../../redux/tasks/operations';\nimport { useState } from 'react';\nimport Modal from '../Modal/Modal';\nimport css from './TaskEditor.module.scss';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { selectAllTasks } from '../../redux/tasks/slice';\n\nexport const TaskEditor = ({ id }: { id: string }) => {\n  const tasks = useSelector(selectAllTasks);\n  const task = tasks.find(task => task._id === id);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [title, setTitle] = useState(task?.title || '');\n  const [description, setDescription] = useState(task?.description || '');\n  const dispatch = useAppDispatch();\n\n  const handleClose = () => setIsModalOpen(false);\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    if (title !== '' || description !== '') {\n      dispatch(updateTask({ title, description, id }));\n      form.reset();\n      handleClose();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n\n  return (\n    <>\n      <button className={css.button} onClick={() => setIsModalOpen(true)}>\n        Edit\n      </button>\n      {isModalOpen && (\n        <Modal onClose={handleClose}>\n          <form className={css.form} onSubmit={handleSubmit}>\n            <input\n              value={title}\n              name=\"text\"\n              className={css.input}\n              onChange={e => setTitle(e.target.value)}\n            />\n            <input\n              value={description}\n              name=\"text\"\n              className={css.input}\n              onChange={e => setDescription(e.target.value)}\n            />\n            <button type=\"submit\" className={css.button}>\n              Edit task\n            </button>\n          </form>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { deleteTask } from '../../redux/tasks/operations';\nimport css from './Task.module.scss';\nimport TaskIcons from '../TaskIcons/TaskIcons';\nimport { TaskEditor } from '../TaskEditor/TaskEditor';\nimport { useAppDispatch } from '../../redux/hooks';\n\nexport const Task = ({\n  id,\n  title,\n  status,\n  description,\n}: {\n  id: string;\n  title: string;\n  status: string;\n  description: string;\n}) => {\n  const dispatch = useAppDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n\n  return (\n    <div className={css.wrapper}>\n      <h3 className={css.text}>{title}</h3>\n      <p>{description}</p>\n      <TaskIcons status={status} id={id} />\n      <TaskEditor id={id} />\n      <button type=\"button\" className={css.button} onClick={handleDelete}>\n        Delete\n      </button>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"empty\":\"TaskList_empty__JmotR\",\"list\":\"TaskList_list__hC4eS\"};","import { useSelector } from 'react-redux';\nimport { Task } from '../Task/Task';\nimport css from './TaskList.module.scss';\nimport { selectAllTasks, selectLoading } from '../../redux/tasks/slice';\n\nexport const TaskList = () => {\n  const tasks = useSelector(selectAllTasks);\n  const loading = useSelector(selectLoading);\n  return (\n    <>\n      {!loading && tasks.length === 0 && (\n        <p className={css.empty}>The task list is empty. Please add tasks..</p>\n      )}\n      <ul className={css.list}>\n        {tasks.map(({ _id: id, title, status, description }) => (\n          <li key={id}>\n            <Task\n              id={id}\n              title={title}\n              status={status}\n              description={description}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"TaskAdd_form__YTZSk\",\"input\":\"TaskAdd_input__sPaPO\",\"button\":\"TaskAdd_button__j6zaj\",\"submitButton\":\"TaskAdd_submitButton__RU1nC\"};","import { addTask } from '../../redux/tasks/operations';\nimport { useState } from 'react';\nimport Modal from '../Modal/Modal';\nimport css from './TaskAdd.module.scss';\nimport { useAppDispatch } from '../../redux/hooks';\n\nexport const TaskAdd = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const dispatch = useAppDispatch();\n\n  const handleClose = () => setIsModalOpen(false);\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setTitle('');\n    setDescription('');\n    const form = e.currentTarget;\n    if (title !== '' && description !== '') {\n      dispatch(addTask({ title, description, status: 'pending' }));\n      form.reset();\n      handleClose();\n      return;\n    }\n    alert('Task or description cannot be empty. Enter some text!');\n  };\n\n  return (\n    <>\n      <button className={css.button} onClick={() => setIsModalOpen(true)}>\n        Add task\n      </button>\n      {isModalOpen && (\n        <Modal onClose={handleClose}>\n          <form className={css.form} onSubmit={handleSubmit}>\n            <input\n              name=\"text\"\n              placeholder=\"Task title\"\n              className={css.input}\n              onChange={e => setTitle(e.target.value)}\n            />\n            <input\n              name=\"text\"\n              placeholder=\"Task description\"\n              className={css.input}\n              onChange={e => setDescription(e.target.value)}\n            />\n            <button type=\"submit\" className={css.submitButton}>\n              Add task\n            </button>\n          </form>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { useSelector } from 'react-redux';\nimport { TaskList } from '../components/TaskList/TaskList';\nimport { TaskAdd } from '../components/TaskAdd/TaskAdd';\nimport { fetchTasks } from '../redux/tasks/operations';\nimport Spinner from '../components/Spinner/Spinner';\nimport { useAppDispatch } from '../redux/hooks';\nimport { selectLoading } from '../redux/tasks/slice';\n\nexport default function Tasks() {\n  const dispatch = useAppDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      {<Spinner isLoading={isLoading} />}\n      <TaskList />\n      <TaskAdd />\n    </HelmetProvider>\n  );\n}\n"],"names":["icons","iconId","buttonStatus","icon","_jsx","TbDeviceIpadQuestion","TbDeviceIpadUp","TbDeviceIpadStar","_ref","status","id","dispatch","useAppDispatch","markup","map","_ref2","disabled","onClick","updateStatusTask","className","concat","css","button","active","children","buttonBox","modalRoot","document","getElementById","onClose","useEffect","esc","event","key","window","addEventListener","removeEventListener","Modal","target","currentTarget","_jsxs","type","VscChromeClose","createPortal","TaskEditor","task","useSelector","selectAllTasks","find","_id","isModalOpen","setIsModalOpen","useState","title","setTitle","description","setDescription","handleClose","_Fragment","onSubmit","e","preventDefault","form","updateTask","reset","alert","value","name","onChange","Task","TaskIcons","handleDelete","deleteTask","TaskList","tasks","loading","selectLoading","length","TaskAdd","addTask","placeholder","Tasks","isLoading","fetchTasks","HelmetProvider","Helmet","Spinner"],"sourceRoot":""}