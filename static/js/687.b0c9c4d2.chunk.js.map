{"version":3,"file":"static/js/687.b0c9c4d2.chunk.js","mappings":"kLACA,QAA0B,yBAA1B,EAA6D,yB,+BCA7D,QAA0B,uBAA1B,EAAyD,qBAAzD,EAA4F,2B,aCS5F,MAAMA,EAAYC,SAASC,eAAe,cAgC1C,EA9B+BC,IAA4B,IAA3B,SAAEC,EAAQ,QAAEC,GAASF,GACnDG,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAOC,IACO,WAAdA,EAAMC,KAAkBJ,GAAS,EAGvC,OADAK,OAAOC,iBAAiB,UAAWJ,GAC5B,KACLG,OAAOE,oBAAoB,UAAWL,EAAI,CAC3C,GACA,CAACF,IAEJ,MAMMQ,GACJC,EAAAA,EAAAA,KAAA,OAAKC,QANLP,IAEIA,EAAMQ,SAAWR,EAAMS,eAAeZ,GAAS,EAIpBa,UAAWC,EAAYf,UACpDgB,EAAAA,EAAAA,MAAA,WAASF,UAAWC,EAAUf,SAAA,EAC5BU,EAAAA,EAAAA,KAAA,UAAQC,QAASV,EAASa,UAAWC,EAAiBE,KAAK,SAAQjB,UACjEU,EAAAA,EAAAA,KAACQ,EAAAA,IAAc,MAEhBlB,OAIP,OAAOmB,EAAAA,EAAAA,cAAaV,EAAOb,EAAU,ECtCvC,EAAuB,sBAAvB,EAAqD,uBAArD,EAAqF,wBAArF,EAA4H,8B,sBCMrH,MAAMwB,EAAUA,KACrB,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,IACzCK,GAAWC,EAAAA,EAAAA,KAEXC,EAAcA,KAClBR,GAAe,GACfG,EAAS,IACTE,EAAe,GAAG,EAepB,OACEX,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAA/B,SAAA,EACEU,EAAAA,EAAAA,KAAA,UAAQI,UAAWC,EAAYJ,QAASA,IAAMW,GAAe,GAAMtB,SAAC,iBAGnEqB,IACCX,EAAAA,EAAAA,KAACD,EAAK,CAACR,QAAS6B,EAAY9B,UAC1BgB,EAAAA,EAAAA,MAAA,QAAMF,UAAWC,EAAUiB,SApBbC,IACpBA,EAAEC,iBACF,MAAMC,EAAOF,EAAEpB,cACD,KAAVW,GAAgC,KAAhBE,GAIpBE,GAASQ,EAAAA,EAAAA,IAAQ,CAAEZ,QAAOE,cAAaW,OAAQ,aAC/CF,EAAKG,QACLR,KALES,EAAAA,GAAMC,MAAM,wDAMR,EAUkDxC,SAAA,EAChDU,EAAAA,EAAAA,KAAA,SACE+B,KAAK,OACLC,YAAY,aACZ5B,UAAWC,EACX4B,SAAUV,GAAKR,EAASQ,EAAErB,OAAOgC,UAEnClC,EAAAA,EAAAA,KAAA,SACE+B,KAAK,OACLC,YAAY,mBACZ5B,UAAWC,EACX4B,SAAUV,GAAKN,EAAeM,EAAErB,OAAOgC,UAEzClC,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAASH,UAAWC,EAAiBf,SAAC,oBAMxD,ECnDM6C,EAAUA,KACrB,MAAMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAkB1B,MAAMC,EAjBN,SAAyBH,GACvB,OAAOA,EAAMI,QACX,CAACC,EAAKC,KACAA,EAAKf,UAAUc,EACjBA,EAAIC,EAAKf,UAETc,EAAIC,EAAKf,QAAU,EAEdc,IAET,CACEE,QAAS,EACTC,SAAU,EACVC,KAAM,GAGZ,CACeC,CAAgBV,GAE/B,OACE9B,EAAAA,EAAAA,MAAA,SAAOF,UAAWC,EAAYf,SAAA,EAC5BU,EAAAA,EAAAA,KAAA,MAAAV,SAAI,kBACJgB,EAAAA,EAAAA,MAAA,OAAKF,UAAWC,EAAYf,SAAA,EAC1BgB,EAAAA,EAAAA,MAAA,KAAAhB,SAAA,CAAG,gBAAc8C,EAAMW,WACvBzC,EAAAA,EAAAA,MAAA,KAAAhB,SAAA,CAAG,YAAUiD,EAAOI,YACpBrC,EAAAA,EAAAA,MAAA,KAAAhB,SAAA,CAAG,gBAAciD,EAAOK,aACxBtC,EAAAA,EAAAA,MAAA,KAAAhB,SAAA,CAAG,SAAOiD,EAAOM,SACjB7C,EAAAA,EAAAA,KAACU,EAAO,SAEJ,ECpCZ,EAAuB,mBAAvB,EAAgE,kCAAhE,EAA2G,qB,aCA3G,SAAgB,UAAY,6BAA6B,OAAS,0BAA0B,QAAU,2BAA2B,SAAW,4BAA4B,KAAO,wBAAwB,OAAS,2BCa1MsC,EAAQ,CACZ,CAAEC,OAAQ,EAAGC,aAAc,UAAWC,MAAMnD,EAAAA,EAAAA,KAACoD,EAAAA,IAAmB,KAChE,CAAEH,OAAQ,EAAGC,aAAc,WAAYC,MAAMnD,EAAAA,EAAAA,KAACqD,EAAAA,IAAkB,KAChE,CAAEJ,OAAQ,EAAGC,aAAc,OAAQC,MAAMnD,EAAAA,EAAAA,KAACsD,EAAAA,IAAmB,MAqB/D,EAlBkBjE,IAA4B,IAA3B,OAAEsC,EAAM,GAAE4B,GAAWlE,EACtC,MAAM6B,GAAWC,EAAAA,EAAAA,KACXqC,EAASR,EAAMS,KAAIC,IAAA,IAAC,aAAER,EAAY,KAAEC,EAAI,OAAEF,GAAQS,EAAA,OACtD1D,EAAAA,EAAAA,KAAA,UACEc,MAAOoC,EACPS,SAAUT,IAAiBvB,EAC3B1B,QAASA,IAAMiB,GAAS0C,EAAAA,EAAAA,IAAiB,CAAEL,KAAI5B,OAAQuB,KAEvD9C,UAAS,GAAAyD,OAAKxD,EAAIsB,GAAO,KAAAkC,OAAIxD,EAAIyD,OAAM,KAAAD,OACrClC,IAAWuB,EAAe7C,EAAI0D,OAAS,IACtCzE,SAEF6D,GALIF,EAME,IAEX,OAAOjD,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,EAAI2D,UAAU1E,SAAEkE,GAAa,EClCtD,EAAuB,yBAAvB,EAAwD,0BAAxD,EAA2F,2BCQ9ES,EAAa5E,IAA6B,IAA5B,GAAEkE,GAAoBlE,EAC/C,MACMqD,GADQL,EAAAA,EAAAA,IAAYC,EAAAA,IACP4B,MAAKxB,GAAQA,EAAKyB,MAAQZ,KACtC5C,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCC,EAAOC,IAAYF,EAAAA,EAAAA,WAAa,OAAJ6B,QAAI,IAAJA,OAAI,EAAJA,EAAM5B,QAAS,KAC3CE,EAAaC,IAAkBJ,EAAAA,EAAAA,WAAa,OAAJ6B,QAAI,IAAJA,OAAI,EAAJA,EAAM1B,cAAe,IAC9DE,GAAWC,EAAAA,EAAAA,KAEXC,EAAcA,IAAMR,GAAe,GAazC,OACEN,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAA/B,SAAA,EACEU,EAAAA,EAAAA,KAAA,UAAQI,UAAWC,EAAYJ,QAASA,IAAMW,GAAe,GAAMtB,SAAC,SAGnEqB,IACCX,EAAAA,EAAAA,KAACD,EAAK,CAACR,QAAS6B,EAAY9B,UAC1BgB,EAAAA,EAAAA,MAAA,QAAMF,UAAWC,EAAUiB,SAnBbC,IACpBA,EAAEC,iBACF,MAAMC,EAAOF,EAAEpB,cACf,GAAc,KAAVW,GAAgC,KAAhBE,EAIlB,OAHAE,GAASkD,EAAAA,EAAAA,IAAW,CAAEtD,QAAOE,cAAauC,QAC1C9B,EAAKG,aACLR,IAGFS,EAAAA,GAAMC,MAAM,wDAAwD,EAUZxC,SAAA,EAChDU,EAAAA,EAAAA,KAAA,SACEkC,MAAOpB,EACPiB,KAAK,OACL3B,UAAWC,EACX4B,SAAUV,GAAKR,EAASQ,EAAErB,OAAOgC,UAEnClC,EAAAA,EAAAA,KAAA,SACEkC,MAAOlB,EACPe,KAAK,OACL3B,UAAWC,EACX4B,SAAUV,GAAKN,EAAeM,EAAErB,OAAOgC,UAEzClC,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAASH,UAAWC,EAAWf,SAAC,qBAMlD,EClDM+E,EAAOhF,IAUb,IAVc,GACnBkE,EAAE,MACFzC,EAAK,OACLa,EAAM,YACNX,GAMD3B,EACC,MAAM6B,GAAWC,EAAAA,EAAAA,KAGjB,OACEb,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAA/B,SAAA,EACEU,EAAAA,EAAAA,KAAA,MAAII,UAAWC,EAASf,SAAEwB,KAC1Bd,EAAAA,EAAAA,KAAA,KAAAV,SAAI0B,KACJhB,EAAAA,EAAAA,KAACsE,EAAS,CAAC3C,OAAQA,EAAQ4B,GAAIA,KAC/BjD,EAAAA,EAAAA,MAAA,OAAKF,UAAWC,EAAwBf,SAAA,EACtCU,EAAAA,EAAAA,KAACiE,EAAU,CAACV,GAAIA,KAChBvD,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAASH,UAAWC,EAAYJ,QAT9BsE,IAAMrD,GAASsD,EAAAA,EAAAA,IAAWjB,IAS0BjE,SAAC,gBAIrE,EC9BP,EAAkK,wBAAlK,EAAiM,uBAAjM,EAA+N,uBCIlNmF,EAAWA,KACtB,MAAMrC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBoC,GAAUrC,EAAAA,EAAAA,IAAYsC,EAAAA,IAC5B,OACE3E,EAAAA,EAAAA,KAAAqB,EAAAA,SAAA,CAAA/B,SACIoF,GAA4B,IAAjBtC,EAAMW,QAGjB/C,EAAAA,EAAAA,KAAA,MAAII,UAAWC,EAASf,SACrB8C,EAAMqB,KAAIpE,IAAA,IAAG8E,IAAKZ,EAAE,MAAEzC,EAAK,OAAEa,EAAM,YAAEX,GAAa3B,EAAA,OACjDW,EAAAA,EAAAA,KAAA,MAAaI,UAAWC,EAASf,UAC/BU,EAAAA,EAAAA,KAACqE,EAAI,CACHd,GAAIA,EACJzC,MAAOA,EACPa,OAAQA,EACRX,YAAaA,KALRuC,EAOJ,OAXTvD,EAAAA,EAAAA,KAAA,KAAGI,UAAWC,EAAUf,SAAC,gDAgC7B,E,aCzCG,MAAMsF,EAAOvF,IAA4C,IAA3C,SAAEC,GAAmCD,EACxD,OAAOW,EAAAA,EAAAA,KAAA,QAAAV,SAAOA,GAAgB,ECQjB,SAASuF,IACtB,MAAM3D,GAAWC,EAAAA,EAAAA,KACX2D,GAAYzC,EAAAA,EAAAA,IAAYsC,EAAAA,IAM9B,OAJAnF,EAAAA,EAAAA,YAAU,KACR0B,GAAS6D,EAAAA,EAAAA,MAAa,GACrB,CAAC7D,KAGFZ,EAAAA,EAAAA,MAACsE,EAAI,CAAAtF,SAAA,EACHU,EAAAA,EAAAA,KAACgF,EAAAA,GAAM,CAAClE,MAAM,gBACdd,EAAAA,EAAAA,KAACiF,EAAAA,EAAO,CAACH,UAAWA,KACpB9E,EAAAA,EAAAA,KAACmC,EAAO,KACRnC,EAAAA,EAAAA,KAACyE,EAAQ,MAGf,C","sources":["webpack://todos-frontend/./src/components/Sidebar/Sidebar.module.scss?60bc","webpack://todos-frontend/./src/components/Modal/Modal.module.scss?b72d","components/Modal/Modal.tsx","webpack://todos-frontend/./src/components/TaskAdd/TaskAdd.module.scss?1f63","components/TaskAdd/TaskAdd.tsx","components/Sidebar/Sidebar.tsx","webpack://todos-frontend/./src/components/Task/Task.module.scss?c652","webpack://todos-frontend/./src/components/TaskIcons/TaskIcons.module.scss?52f3","components/TaskIcons/TaskIcons.tsx","webpack://todos-frontend/./src/components/TaskEditor/TaskEditor.module.scss?5acd","components/TaskEditor/TaskEditor.tsx","components/Task/Task.tsx","webpack://todos-frontend/./src/components/TaskList/TaskList.module.scss?30ed","components/TaskList/TaskList.tsx","components/Containers/Main.tsx","pages/Tasks.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"sidebar\":\"Sidebar_sidebar__S9EbY\",\"infobox\":\"Sidebar_infobox__ebB4g\"};","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__b+zEz\",\"modal\":\"Modal_modal__yEgVW\",\"closeButton\":\"Modal_closeButton__3V9B-\"};","import { ReactNode, FC, useEffect, MouseEvent } from 'react';\nimport { createPortal } from 'react-dom';\nimport { VscChromeClose } from 'react-icons/vsc';\nimport css from './Modal.module.scss';\n\ninterface IModalProps {\n  children: ReactNode;\n  onClose: () => void;\n}\n\nconst modalRoot = document.getElementById('modal-root') as HTMLElement;\n\nconst Modal: FC<IModalProps> = ({ children, onClose }) => {\n  useEffect(() => {\n    const esc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onClose();\n    };\n    window.addEventListener('keydown', esc);\n    return () => {\n      window.removeEventListener('keydown', esc);\n    };\n  }, [onClose]);\n\n  const onEscTapHandler = (\n    event: MouseEvent<HTMLDivElement, globalThis.MouseEvent>\n  ) => {\n    if (event.target === event.currentTarget) onClose();\n  };\n\n  const Modal = (\n    <div onClick={onEscTapHandler} className={css.overlay}>\n      <section className={css.modal}>\n        <button onClick={onClose} className={css.closeButton} type=\"button\">\n          <VscChromeClose />\n        </button>\n        {children}\n      </section>\n    </div>\n  );\n  return createPortal(Modal, modalRoot);\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"TaskAdd_form__YTZSk\",\"input\":\"TaskAdd_input__sPaPO\",\"button\":\"TaskAdd_button__j6zaj\",\"submitButton\":\"TaskAdd_submitButton__RU1nC\"};","import { addTask } from '../../redux/tasks/operations';\nimport { useState } from 'react';\nimport Modal from '../Modal/Modal';\nimport css from './TaskAdd.module.scss';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { toast } from 'react-hot-toast';\n\nexport const TaskAdd = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const dispatch = useAppDispatch();\n\n  const handleClose = () => {\n    setIsModalOpen(false);\n    setTitle('');\n    setDescription('');\n  };\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    if (title === '' || description === '') {\n      toast.error('Task or description cannot be empty. Enter some text!');\n      return;\n    }\n    dispatch(addTask({ title, description, status: 'pending' }));\n    form.reset();\n    handleClose();\n    return;\n  };\n\n  return (\n    <>\n      <button className={css.button} onClick={() => setIsModalOpen(true)}>\n        Add new task\n      </button>\n      {isModalOpen && (\n        <Modal onClose={handleClose}>\n          <form className={css.form} onSubmit={handleSubmit}>\n            <input\n              name=\"text\"\n              placeholder=\"Task title\"\n              className={css.input}\n              onChange={e => setTitle(e.target.value)}\n            />\n            <input\n              name=\"text\"\n              placeholder=\"Task description\"\n              className={css.input}\n              onChange={e => setDescription(e.target.value)}\n            />\n            <button type=\"submit\" className={css.submitButton}>\n              Add task\n            </button>\n          </form>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectAllTasks } from '../../redux/tasks/slice';\nimport { Task } from '../../@types/types';\nimport css from './Sidebar.module.scss';\nimport { TaskAdd } from '../TaskAdd/TaskAdd';\n\nexport const Sidebar = () => {\n  const tasks = useSelector(selectAllTasks);\n  function getStatusCounts(tasks: Task[]) {\n    return tasks.reduce(\n      (acc, task) => {\n        if (task.status in acc) {\n          acc[task.status]++;\n        } else {\n          acc[task.status] = 1;\n        }\n        return acc;\n      },\n      {\n        pending: 0,\n        progress: 0,\n        done: 0,\n      }\n    );\n  }\n  const counts = getStatusCounts(tasks);\n\n  return (\n    <aside className={css.sidebar}>\n      <h2>Task manager</h2>\n      <div className={css.infobox}>\n        <p>Total Tasks: {tasks.length}</p>\n        <p>Pending: {counts.pending}</p>\n        <p>In Progress: {counts.progress}</p>\n        <p>Done: {counts.done}</p>\n        <TaskAdd />\n      </div>\n    </aside>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"Task_text__vGIiB\",\"buttonsBoxOperation\":\"Task_buttonsBoxOperation__TO9Fq\",\"button\":\"Task_button__V47ld\"};","// extracted by mini-css-extract-plugin\nexport default {\"buttonBox\":\"TaskIcons_buttonBox__wkfD6\",\"button\":\"TaskIcons_button__vntqI\",\"pending\":\"TaskIcons_pending__93UD3\",\"progress\":\"TaskIcons_progress__Q14AU\",\"done\":\"TaskIcons_done__8bcWb\",\"active\":\"TaskIcons_active__-H5mP\"};","import {\n  TbDeviceTabletPause,\n  TbDeviceTabletCode,\n  TbDeviceTabletCheck,\n} from 'react-icons/tb';\nimport { updateStatusTask } from '../../redux/tasks/operations';\nimport { useAppDispatch } from '../../redux/hooks';\nimport css from './TaskIcons.module.scss';\n\ntype Props = {\n  status: string;\n  id: string;\n};\n\nconst icons = [\n  { iconId: 1, buttonStatus: 'pending', icon: <TbDeviceTabletPause /> },\n  { iconId: 2, buttonStatus: 'progress', icon: <TbDeviceTabletCode /> },\n  { iconId: 3, buttonStatus: 'done', icon: <TbDeviceTabletCheck /> },\n];\n\nconst TaskIcons = ({ status, id }: Props) => {\n  const dispatch = useAppDispatch();\n  const markup = icons.map(({ buttonStatus, icon, iconId }) => (\n    <button\n      title={buttonStatus}\n      disabled={buttonStatus === status}\n      onClick={() => dispatch(updateStatusTask({ id, status: buttonStatus }))}\n      key={iconId}\n      className={`${css[status]} ${css.button} ${\n        status === buttonStatus ? css.active : ''\n      }`}\n    >\n      {icon}\n    </button>\n  ));\n  return <div className={css.buttonBox}>{markup}</div>;\n};\n\nexport default TaskIcons;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"TaskEditor_form__+91ls\",\"input\":\"TaskEditor_input__eEAwt\",\"button\":\"TaskEditor_button__aaHcY\"};","import { useSelector } from 'react-redux';\nimport { updateTask } from '../../redux/tasks/operations';\nimport { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport Modal from '../Modal/Modal';\nimport css from './TaskEditor.module.scss';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { selectAllTasks } from '../../redux/tasks/slice';\n\nexport const TaskEditor = ({ id }: { id: string }) => {\n  const tasks = useSelector(selectAllTasks);\n  const task = tasks.find(task => task._id === id);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [title, setTitle] = useState(task?.title || '');\n  const [description, setDescription] = useState(task?.description || '');\n  const dispatch = useAppDispatch();\n\n  const handleClose = () => setIsModalOpen(false);\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    if (title !== '' || description !== '') {\n      dispatch(updateTask({ title, description, id }));\n      form.reset();\n      handleClose();\n      return;\n    }\n    toast.error('Task or description cannot be empty. Enter some text!');\n  };\n\n  return (\n    <>\n      <button className={css.button} onClick={() => setIsModalOpen(true)}>\n        Edit\n      </button>\n      {isModalOpen && (\n        <Modal onClose={handleClose}>\n          <form className={css.form} onSubmit={handleSubmit}>\n            <input\n              value={title}\n              name=\"text\"\n              className={css.input}\n              onChange={e => setTitle(e.target.value)}\n            />\n            <input\n              value={description}\n              name=\"text\"\n              className={css.input}\n              onChange={e => setDescription(e.target.value)}\n            />\n            <button type=\"submit\" className={css.button}>\n              Edit task\n            </button>\n          </form>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { deleteTask } from '../../redux/tasks/operations';\nimport css from './Task.module.scss';\nimport TaskIcons from '../TaskIcons/TaskIcons';\nimport { TaskEditor } from '../TaskEditor/TaskEditor';\nimport { useAppDispatch } from '../../redux/hooks';\n\nexport const Task = ({\n  id,\n  title,\n  status,\n  description,\n}: {\n  id: string;\n  title: string;\n  status: string;\n  description: string;\n}) => {\n  const dispatch = useAppDispatch();\n  const handleDelete = () => dispatch(deleteTask(id));\n\n  return (\n    <>\n      <h3 className={css.text}>{title}</h3>\n      <p>{description}</p>\n      <TaskIcons status={status} id={id} />\n      <div className={css.buttonsBoxOperation}>\n        <TaskEditor id={id} />\n        <button type=\"button\" className={css.button} onClick={handleDelete}>\n          Delete\n        </button>\n      </div>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TaskList_root__Ne4d2\",\"home\":\"TaskList_home__3XL0F\",\"homeTitle\":\"TaskList_homeTitle__uXwP3\",\"authPage\":\"TaskList_authPage__-YcN8\",\"empty\":\"TaskList_empty__JmotR\",\"list\":\"TaskList_list__hC4eS\",\"item\":\"TaskList_item__mBbX7\"};","import { useSelector } from 'react-redux';\nimport { Task } from '../Task/Task';\nimport { selectAllTasks, selectLoading } from '../../redux/tasks/slice';\nimport css from './TaskList.module.scss';\n\nexport const TaskList = () => {\n  const tasks = useSelector(selectAllTasks);\n  const loading = useSelector(selectLoading);\n  return (\n    <>\n      {!loading && tasks.length === 0 ? (\n        <p className={css.empty}>The task list is empty. Please add tasks..</p>\n      ) : (\n        <ul className={css.list}>\n          {tasks.map(({ _id: id, title, status, description }) => (\n            <li key={id} className={css.item}>\n              <Task\n                id={id}\n                title={title}\n                status={status}\n                description={description}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n    // <>\n    //   {!loading && tasks.length === 0 && (\n    //     <p className={css.empty}>The task list is empty. Please add tasks..</p>\n    //   )}\n    //   <ul className={css.list}>\n    //     {tasks.map(({ _id: id, title, status, description }) => (\n    //       <li key={id} className={css.item}>\n    //         <Task\n    //           id={id}\n    //           title={title}\n    //           status={status}\n    //           description={description}\n    //         />\n    //       </li>\n    //     ))}\n    //   </ul>\n    // </>\n  );\n};\n","import { ReactNode } from 'react';\n\nexport const Main = ({ children }: { children: ReactNode }) => {\n  return <main>{children}</main>;\n};\n","import { useEffect } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useSelector } from 'react-redux';\nimport { Sidebar } from '../components/Sidebar/Sidebar';\nimport { TaskList } from '../components/TaskList/TaskList';\nimport { fetchTasks } from '../redux/tasks/operations';\nimport Spinner from '../components/Spinner/Spinner';\nimport { useAppDispatch } from '../redux/hooks';\nimport { selectLoading } from '../redux/tasks/slice';\nimport { Main } from '../components/Containers/Main';\n\nexport default function Tasks() {\n  const dispatch = useAppDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <Main>\n      <Helmet title=\"Your tasks\" />\n      <Spinner isLoading={isLoading} />\n      <Sidebar />\n      <TaskList />\n    </Main>\n  );\n}\n"],"names":["modalRoot","document","getElementById","_ref","children","onClose","useEffect","esc","event","key","window","addEventListener","removeEventListener","Modal","_jsx","onClick","target","currentTarget","className","css","_jsxs","type","VscChromeClose","createPortal","TaskAdd","isModalOpen","setIsModalOpen","useState","title","setTitle","description","setDescription","dispatch","useAppDispatch","handleClose","_Fragment","onSubmit","e","preventDefault","form","addTask","status","reset","toast","error","name","placeholder","onChange","value","Sidebar","tasks","useSelector","selectAllTasks","counts","reduce","acc","task","pending","progress","done","getStatusCounts","length","icons","iconId","buttonStatus","icon","TbDeviceTabletPause","TbDeviceTabletCode","TbDeviceTabletCheck","id","markup","map","_ref2","disabled","updateStatusTask","concat","button","active","buttonBox","TaskEditor","find","_id","updateTask","Task","TaskIcons","handleDelete","deleteTask","TaskList","loading","selectLoading","Main","Tasks","isLoading","fetchTasks","Helmet","Spinner"],"sourceRoot":""}