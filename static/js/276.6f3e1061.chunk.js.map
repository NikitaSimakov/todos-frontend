{"version":3,"file":"static/js/276.6f3e1061.chunk.js","mappings":"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","sources":["webpack://todos-frontend/./src/components/Sidebar/Sidebar.module.scss?60bc","webpack://todos-frontend/./src/components/Modal/Modal.module.scss?b72d","components/Modal/Modal.tsx","webpack://todos-frontend/./src/components/TaskForm/TaskForm.module.scss?ad61","components/TaskForm/TaskForm.tsx","webpack://todos-frontend/./src/components/TaskButton/TaskButton.module.scss?f4df","components/TaskButton/TaskButton.tsx","components/TaskAdd/TaskAdd.tsx","components/Sidebar/Sidebar.tsx","webpack://todos-frontend/./src/components/Task/Task.module.scss?c652","webpack://todos-frontend/./src/components/TaskIcons/TaskIcons.module.scss?52f3","components/TaskIcons/TaskIcons.tsx","components/TaskEditor/TaskEditor.tsx","components/Task/Task.tsx","webpack://todos-frontend/./src/components/TaskList/TaskList.module.scss?30ed","components/TaskList/TaskList.tsx","components/Containers/Main.tsx","pages/Tasks.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"sidebar\":\"Sidebar_sidebar__S9EbY\",\"infobox\":\"Sidebar_infobox__ebB4g\"};","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__b+zEz\",\"modal\":\"Modal_modal__yEgVW\",\"closeButton\":\"Modal_closeButton__3V9B-\"};","import { ReactNode, FC, useEffect, MouseEvent } from 'react';\nimport { createPortal } from 'react-dom';\nimport { VscChromeClose } from 'react-icons/vsc';\nimport css from './Modal.module.scss';\n\ninterface IModalProps {\n  children: ReactNode;\n  onClose: () => void;\n}\n\nconst modalRoot = document.getElementById('modal-root') as HTMLElement;\n\nconst Modal: FC<IModalProps> = ({ children, onClose }) => {\n  useEffect(() => {\n    const esc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onClose();\n    };\n    window.addEventListener('keydown', esc);\n    return () => {\n      window.removeEventListener('keydown', esc);\n    };\n  }, [onClose]);\n\n  const onEscTapHandler = (\n    event: MouseEvent<HTMLDivElement, globalThis.MouseEvent>\n  ) => {\n    if (event.target === event.currentTarget) onClose();\n  };\n\n  const Modal = (\n    <div onClick={onEscTapHandler} className={css.overlay}>\n      <section className={css.modal}>\n        <button onClick={onClose} className={css.closeButton} type=\"button\">\n          <VscChromeClose />\n        </button>\n        {children}\n      </section>\n    </div>\n  );\n  return createPortal(Modal, modalRoot);\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"TaskForm_form__zGw36\",\"input\":\"TaskForm_input__lNQP-\",\"submitButton\":\"TaskForm_submitButton__MXFNi\"};","import React, { useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport css from './TaskForm.module.scss';\nimport { TaskFormProps } from '../../@types/types';\n\nconst TaskForm: React.FC<TaskFormProps> = ({\n  onSubmit,\n  onClose,\n  initialValue,\n}) => {\n  const [title, setTitle] = useState(initialValue?.title || '');\n  const [description, setDescription] = useState(\n    initialValue?.description || ''\n  );\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (title === '' || description === '') {\n      toast.error('Task or description cannot be empty. Enter some text!');\n      return;\n    }\n    onSubmit(title, description);\n    setTitle('');\n    setDescription('');\n    onClose();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        name=\"title\"\n        placeholder=\"Task title\"\n        className={css.input}\n        value={title}\n        onChange={e => setTitle(e.target.value)}\n      />\n      <input\n        name=\"description\"\n        placeholder=\"Task description\"\n        className={css.input}\n        value={description}\n        onChange={e => setDescription(e.target.value)}\n      />\n      <button type=\"submit\" className={css.submitButton}>\n        Add task\n      </button>\n    </form>\n  );\n};\n\nexport default TaskForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"TaskButton_button__q+7kW\"};","import css from './TaskButton.module.scss';\n\nexport const TaskButton = ({\n  name,\n  opener,\n}: {\n  name: string;\n  opener: (value: React.SetStateAction<boolean>) => void;\n}) => {\n  return (\n    <button className={css.button} onClick={() => opener(true)} type=\"button\">\n      {name}\n    </button>\n  );\n};\n","import { addTask } from '../../redux/tasks/operations';\nimport Modal from '../Modal/Modal';\nimport { useAppDispatch } from '../../redux/hooks';\nimport TaskForm from '../TaskForm/TaskForm';\nimport { TaskButton } from '../TaskButton/TaskButton';\nimport { useModal } from '../../hooks';\n\nexport const TaskAdd = () => {\n  const { isModalOpen, open, close } = useModal();\n  const dispatch = useAppDispatch();\n\n  const handleSubmit = (title: string, description: string) => {\n    dispatch(addTask({ title, description, status: 'pending' }));\n  };\n\n  return (\n    <>\n      <TaskButton name=\"Add new task\" opener={open} />\n      {isModalOpen && (\n        <Modal onClose={close}>\n          <TaskForm onSubmit={handleSubmit} onClose={close} />\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectAllTasks } from '../../redux/tasks/slice';\nimport { TaskProps } from '../../@types/types';\nimport css from './Sidebar.module.scss';\nimport { TaskAdd } from '../TaskAdd/TaskAdd';\n\nexport const Sidebar = () => {\n  const tasks = useSelector(selectAllTasks);\n  function getStatusCounts(tasks: TaskProps[]) {\n    return tasks.reduce(\n      (acc, task) => {\n        if (task.status in acc) {\n          acc[task.status]++;\n        } else {\n          acc[task.status] = 1;\n        }\n        return acc;\n      },\n      {\n        pending: 0,\n        progress: 0,\n        done: 0,\n      }\n    );\n  }\n  const counts = getStatusCounts(tasks);\n\n  return (\n    <aside className={css.sidebar}>\n      <h2>Task manager</h2>\n      <TaskAdd />\n      <ul className={css.infobox}>\n        <li>Total Tasks: {tasks.length}</li>\n        <li>Pending: {counts.pending}</li>\n        <li>In Progress: {counts.progress}</li>\n        <li>Done: {counts.done}</li>\n      </ul>\n    </aside>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Task_title__5yswI\",\"description\":\"Task_description__1vJbm\",\"buttonsBoxOperation\":\"Task_buttonsBoxOperation__TO9Fq\",\"button\":\"Task_button__V47ld\"};","// extracted by mini-css-extract-plugin\nexport default {\"buttonBox\":\"TaskIcons_buttonBox__wkfD6\",\"button\":\"TaskIcons_button__vntqI\",\"pending\":\"TaskIcons_pending__93UD3\",\"progress\":\"TaskIcons_progress__Q14AU\",\"done\":\"TaskIcons_done__8bcWb\",\"active\":\"TaskIcons_active__-H5mP\"};","import {\n  TbDeviceTabletPause,\n  TbDeviceTabletCode,\n  TbDeviceTabletCheck,\n} from 'react-icons/tb';\nimport { updateStatusTask } from '../../redux/tasks/operations';\nimport { useAppDispatch } from '../../redux/hooks';\nimport css from './TaskIcons.module.scss';\n\ntype Props = {\n  status: string;\n  id: string;\n};\n\nconst icons = [\n  { iconId: 1, buttonStatus: 'pending', icon: <TbDeviceTabletPause /> },\n  { iconId: 2, buttonStatus: 'progress', icon: <TbDeviceTabletCode /> },\n  { iconId: 3, buttonStatus: 'done', icon: <TbDeviceTabletCheck /> },\n];\n\nconst TaskIcons = ({ status, id }: Props) => {\n  const dispatch = useAppDispatch();\n  const markup = icons.map(({ buttonStatus, icon, iconId }) => (\n    <button\n      title={buttonStatus}\n      disabled={buttonStatus === status}\n      onClick={() => dispatch(updateStatusTask({ id, status: buttonStatus }))}\n      key={iconId}\n      className={`${css[status]} ${css.button} ${\n        status === buttonStatus ? css.active : ''\n      }`}\n    >\n      {icon}\n    </button>\n  ));\n  return <div className={css.buttonBox}>{markup}</div>;\n};\n\nexport default TaskIcons;\n","import { updateTask } from '../../redux/tasks/operations';\nimport Modal from '../Modal/Modal';\nimport { useAppDispatch } from '../../redux/hooks';\nimport TaskForm from '../TaskForm/TaskForm';\nimport { TaskProps } from '../../@types/types';\nimport { TaskButton } from '../TaskButton/TaskButton';\nimport { useModal } from '../../hooks';\n\nexport const TaskEditor = ({ title, description, _id }: TaskProps) => {\n  const { isModalOpen, open, close } = useModal();\n  const dispatch = useAppDispatch();\n\n  const handleSubmit = (title: string, description: string) => {\n    dispatch(updateTask({ title, description, id: _id }));\n  };\n\n  return (\n    <>\n      <TaskButton name=\"Edit\" opener={open} />\n      {isModalOpen && (\n        <Modal onClose={close}>\n          <TaskForm\n            onClose={close}\n            onSubmit={handleSubmit}\n            initialValue={{ title, description }}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { deleteTask } from '../../redux/tasks/operations';\nimport css from './Task.module.scss';\nimport TaskIcons from '../TaskIcons/TaskIcons';\nimport { TaskEditor } from '../TaskEditor/TaskEditor';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { TaskProps } from '../../@types/types';\nimport { useNotification } from '../../hooks';\n\nexport const Task = (task: TaskProps) => {\n  const { _id, title, status, description } = task;\n  const { addNotification } = useNotification();\n  const dispatch = useAppDispatch();\n  const handleDelete = () =>\n    dispatch(deleteTask({ taskId: _id, addNotification }));\n\n  return (\n    <>\n      <h3 className={css.title}>{title}</h3>\n      <p className={css.description}>{description}</p>\n      <TaskIcons status={status} id={_id} />\n      <div className={css.buttonsBoxOperation}>\n        <TaskEditor\n          title={title}\n          description={description}\n          _id={_id}\n          status={status}\n        />\n        <button type=\"button\" className={css.button} onClick={handleDelete}>\n          Delete\n        </button>\n      </div>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TaskList_root__Ne4d2\",\"home\":\"TaskList_home__3XL0F\",\"homeTitle\":\"TaskList_homeTitle__uXwP3\",\"authPage\":\"TaskList_authPage__-YcN8\",\"empty\":\"TaskList_empty__JmotR\",\"list\":\"TaskList_list__hC4eS\",\"item\":\"TaskList_item__mBbX7\"};","import { useSelector } from 'react-redux';\nimport { Task } from '../Task/Task';\nimport { selectAllTasks, selectLoading } from '../../redux/tasks/slice';\nimport css from './TaskList.module.scss';\nexport const TaskList = () => {\n  const tasks = useSelector(selectAllTasks);\n  const loading = useSelector(selectLoading);\n  return (\n    <>\n      {!loading && tasks.length === 0 ? (\n        <p className={css.empty}>The task list is empty. Please add tasks..</p>\n      ) : (\n        <ul className={css.list}>\n          {tasks.map(({ _id: id, title, status, description }) => (\n            <li key={id} className={css.item}>\n              <Task\n                _id={id}\n                title={title}\n                status={status}\n                description={description}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import { ReactNode } from 'react';\n\nexport const Main = ({ children }: { children: ReactNode }) => {\n  return <main>{children}</main>;\n};\n","import { useEffect } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useSelector } from 'react-redux';\nimport { Sidebar } from '../components/Sidebar/Sidebar';\nimport { TaskList } from '../components/TaskList/TaskList';\nimport { fetchTasks } from '../redux/tasks/operations';\nimport Spinner from '../components/Spinner/Spinner';\nimport { useAppDispatch } from '../redux/hooks';\nimport { selectLoading } from '../redux/tasks/slice';\nimport { Main } from '../components/Containers/Main';\n\nexport default function Tasks() {\n  const dispatch = useAppDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <Main>\n      <Helmet title=\"Your tasks\" />\n      <Spinner isLoading={isLoading} />\n      <Sidebar />\n      <TaskList />\n    </Main>\n  );\n}\n"],"names":["modalRoot","document","getElementById","_ref","children","onClose","useEffect","esc","event","key","window","addEventListener","removeEventListener","Modal","_jsx","onClick","target","currentTarget","className","css","_jsxs","type","VscChromeClose","createPortal","onSubmit","initialValue","title","setTitle","useState","description","setDescription","e","preventDefault","toast","error","name","placeholder","value","onChange","TaskButton","opener","TaskAdd","isModalOpen","open","close","useModal","dispatch","useAppDispatch","_Fragment","TaskForm","handleSubmit","addTask","status","Sidebar","tasks","useSelector","selectAllTasks","counts","reduce","acc","task","pending","progress","done","getStatusCounts","length","icons","iconId","buttonStatus","icon","TbDeviceTabletPause","TbDeviceTabletCode","TbDeviceTabletCheck","id","markup","map","_ref2","disabled","updateStatusTask","concat","button","active","buttonBox","TaskEditor","_id","updateTask","Task","addNotification","useNotification","TaskIcons","handleDelete","deleteTask","taskId","TaskList","loading","selectLoading","Main","Tasks","isLoading","fetchTasks","Helmet","Spinner"],"sourceRoot":""}