{"version":3,"file":"static/js/90.215046e6.chunk.js","mappings":"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","sources":["webpack://todos-frontend/./src/components/Task/Task.module.scss?c652","webpack://todos-frontend/./src/components/TaskIcon/TaskIcon.module.scss?0a01","components/TaskIcon/TaskIcon.tsx","components/Task/Task.tsx","redux/tasks/selectors.ts","webpack://todos-frontend/./src/components/TaskList/TaskList.module.scss?30ed","components/TaskList/TaskList.tsx","webpack://todos-frontend/./src/components/Modal/Modal.module.scss?b72d","components/Modal/Modal.tsx","webpack://todos-frontend/./src/components/TaskEditor/TaskEditor.module.scss?5acd","components/TaskEditor/TaskEditor.tsx","pages/Tasks.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Task_wrapper__CE+Ok\",\"text\":\"Task_text__vGIiB\",\"button\":\"Task_button__V47ld\"};","// extracted by mini-css-extract-plugin\nexport default {\"buttonBox\":\"TaskIcon_buttonBox__iVW7n\",\"button\":\"TaskIcon_button__RVh8x\",\"pending\":\"TaskIcon_pending__v0DVM\",\"progress\":\"TaskIcon_progress__D-peN\",\"done\":\"TaskIcon_done__-5dyJ\",\"active\":\"TaskIcon_active__L1dW3\"};","import { TbDeviceIpadQuestion } from 'react-icons/tb';\nimport { TbDeviceIpadUp } from 'react-icons/tb';\nimport { TbDeviceIpadStar } from 'react-icons/tb';\nimport css from './TaskIcon.module.scss';\nimport { updateStatusTask } from '../../redux/tasks/operations';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../../redux/store';\n\ntype Props = {\n  status: string;\n  id: string;\n};\n\nconst icons = [\n  { iconId: 1, buttonStatus: 'pending', icon: <TbDeviceIpadQuestion /> },\n  { iconId: 2, buttonStatus: 'progress', icon: <TbDeviceIpadUp /> },\n  { iconId: 3, buttonStatus: 'done', icon: <TbDeviceIpadStar /> },\n];\n\nconst TaskIcon = ({ status, id }: Props) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const markup = icons.map(({ buttonStatus, icon, iconId }) => (\n    <button\n      disabled={buttonStatus === status}\n      onClick={() => dispatch(updateStatusTask({ id, status: buttonStatus }))}\n      key={iconId}\n      className={`${css[status]} ${css.button} ${\n        status === buttonStatus ? css.active : ''\n      }`}\n    >\n      {icon}\n    </button>\n  ));\n  return <div className={css.buttonBox}>{markup}</div>;\n};\n\nexport default TaskIcon;\n","import { useDispatch } from 'react-redux';\nimport { deleteTask } from '../../redux/tasks/operations';\nimport css from './Task.module.scss';\nimport { AppDispatch } from '../../redux/store';\nimport TaskIcon from '../TaskIcon/TaskIcon';\n\nexport const Task = ({\n  id,\n  text,\n  status,\n  description,\n}: {\n  id: string;\n  text: string;\n  status: string;\n  description: string;\n}) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const handleDelete = () => dispatch(deleteTask(id));\n\n  return (\n    <div className={css.wrapper}>\n      <h3 className={css.text}>{text}</h3>\n      <p>{description}</p>\n      <TaskIcon status={status} id={id} />\n      <button type=\"button\" className={css.button} onClick={handleDelete}>\n        Delete\n      </button>\n    </div>\n  );\n};\n","import { RootState } from '../store';\n\nexport const selectLoading = (state: RootState) => state.tasks.isLoading;\n\n// export const selectFilter = (state: RootState) => state.tasks.filter;\n\nexport const selectAllTasks = (state: RootState) => state.tasks.items;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"TaskList_list__hC4eS\"};","import { useSelector } from 'react-redux';\nimport { Task } from '../Task/Task';\nimport { selectAllTasks } from '../../redux/tasks/selectors';\nimport css from './TaskList.module.scss';\n\nexport const TaskList = () => {\n  const tasks = useSelector(selectAllTasks);\n  return (\n    <ul className={css.list}>\n      {tasks.map(({ _id: id, title, status, description }) => (\n        <li key={id}>\n          <Task\n            id={id}\n            text={title}\n            status={status}\n            description={description}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__b+zEz\",\"modal\":\"Modal_modal__yEgVW\",\"closeButton\":\"Modal_closeButton__3V9B-\"};","import { ReactNode, FC, useEffect, MouseEvent } from 'react';\nimport { createPortal } from 'react-dom';\nimport { VscChromeClose } from 'react-icons/vsc';\nimport css from './Modal.module.scss';\n\ninterface IModalProps {\n  children: ReactNode;\n  onClose: () => void;\n}\n\nconst modalRoot = document.getElementById('modal-root') as HTMLElement;\n\nconst Modal: FC<IModalProps> = ({ children, onClose }) => {\n  useEffect(() => {\n    const esc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') onClose();\n    };\n    window.addEventListener('keydown', esc);\n    return () => {\n      window.removeEventListener('keydown', esc);\n    };\n  }, [onClose]);\n\n  const onEscTapHandler = (\n    event: MouseEvent<HTMLDivElement, globalThis.MouseEvent>\n  ) => {\n    if (event.target === event.currentTarget) onClose();\n  };\n\n  const Modal = (\n    <div onClick={onEscTapHandler} className={css.overlay}>\n      <section className={css.modal}>\n        <button onClick={onClose} className={css.closeButton} type=\"button\">\n          <VscChromeClose />\n        </button>\n        {children}\n      </section>\n    </div>\n  );\n  return createPortal(Modal, modalRoot);\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"TaskEditor_form__+91ls\",\"input\":\"TaskEditor_input__eEAwt\",\"button\":\"TaskEditor_button__aaHcY\"};","import { useDispatch } from 'react-redux';\nimport { addTask } from '../../redux/tasks/operations';\nimport { AppDispatch } from '../../redux/store';\nimport { useState } from 'react';\nimport Modal from '../Modal/Modal';\nimport css from './TaskEditor.module.scss';\n\nexport const TaskEditor = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  // const [status, setStatus] = useState('');\n  const dispatch = useDispatch<AppDispatch>();\n\n  const handleClose = () => setIsModalOpen(false);\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    if (title !== '') {\n      dispatch(addTask({ title, description, status: 'pending' }));\n      form.reset();\n      handleClose();\n      return;\n    }\n    alert('Task cannot be empty. Enter some text!');\n  };\n\n  return (\n    <>\n      <button onClick={() => setIsModalOpen(true)}>Add task</button>\n      {isModalOpen && (\n        <Modal onClose={handleClose}>\n          <form className={css.form} onSubmit={handleSubmit}>\n            <input\n              name=\"text\"\n              className={css.input}\n              onChange={e => setTitle(e.target.value)}\n            />\n            <input\n              name=\"text\"\n              className={css.input}\n              onChange={e => setDescription(e.target.value)}\n            />\n            <button type=\"submit\" className={css.button}>\n              Add task\n            </button>\n          </form>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TaskList } from '../components/TaskList/TaskList';\nimport { TaskEditor } from '../components/TaskEditor/TaskEditor';\nimport { fetchTasks } from '../redux/tasks/operations';\nimport { selectLoading } from '../redux/tasks/selectors';\nimport { AppDispatch } from '../redux/store';\n\nexport default function Tasks() {\n  const dispatch = useDispatch<AppDispatch>();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <TaskEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <TaskList />\n    </HelmetProvider>\n  );\n}\n"],"names":["icons","iconId","buttonStatus","icon","_jsx","TbDeviceIpadQuestion","TbDeviceIpadUp","TbDeviceIpadStar","_ref","status","id","dispatch","useDispatch","markup","map","_ref2","disabled","onClick","updateStatusTask","className","concat","css","button","active","children","buttonBox","Task","text","description","_jsxs","TaskIcon","type","handleDelete","deleteTask","selectLoading","state","tasks","isLoading","selectAllTasks","items","TaskList","useSelector","_id","title","modalRoot","document","getElementById","onClose","useEffect","esc","event","key","window","addEventListener","removeEventListener","Modal","target","currentTarget","VscChromeClose","createPortal","TaskEditor","isModalOpen","setIsModalOpen","useState","setTitle","setDescription","handleClose","_Fragment","onSubmit","e","preventDefault","form","addTask","reset","alert","name","onChange","value","Tasks","fetchTasks","HelmetProvider","Helmet"],"sourceRoot":""}